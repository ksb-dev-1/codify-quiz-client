datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  email            String?          @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  savedQuestions   SavedQuestion[]
  questionStatuses QuestionStatus[]
  payments         Payment[]
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Topic {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  questions   Question[]
}

model SavedQuestion {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  questionId String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

enum QuestionStatusEnum {
  TODO
  ATTEMPTED
  SOLVED
}

model QuestionStatus {
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  userId      String             @db.ObjectId
  questionId  String             @db.ObjectId
  status      QuestionStatusEnum @default(TODO) // ✅ Enforce enum instead of free string
  isCorrect   Boolean            @default(false)
  completedAt DateTime?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  question    Question           @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

enum DifficultyLevel {
  EASY
  MEDIUM
  HARD
}

model Question {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  qNo              Int
  question         String
  codeSnippet      String?
  options          Json
  correctOption    String
  explanation      String?
  difficulty       DifficultyLevel  @default(EASY) // ✅ Use enum instead of string
  isPremium        Boolean          @default(false)
  topicId          String           @db.ObjectId
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  topic            Topic            @relation(fields: [topicId], references: [id], onDelete: Cascade)
  savedQuestions   SavedQuestion[]
  questionStatuses QuestionStatus[]
}

model Payment {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  paymentIntentId String?  @unique
  amount          Int
  status          Boolean  @default(false)
  userId          String   @db.ObjectId
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
